import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_localizations/flutter_localizations.dart';

import 'Config/Localization/AppLocalizations.dart';
import 'Config/Theme/AppTheme.dart';
import 'SplashScreen.dart';

import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

// main.dart
import 'firebase_options.dart' as fo; // <-- generated by flutterfire configure
import 'firebase_background.dart';        // <-- handler defined here

// (Optional) local notifications singletons
final FlutterLocalNotificationsPlugin _flnp = FlutterLocalNotificationsPlugin();

const AndroidNotificationChannel _highImportanceChannel = AndroidNotificationChannel(
  'high_importance',
  'High Importance Notifications',
  description: 'Used for important notifications.',
  importance: Importance.high,
);

Future<void> _initLocalNotifications() async {
  const android = AndroidInitializationSettings('@mipmap/ic_launcher');
  const ios = DarwinInitializationSettings(
    requestAlertPermission: false,
    requestBadgePermission: false,
    requestSoundPermission: false,
  );
  const initSettings = InitializationSettings(android: android, iOS: ios);
  await _flnp.initialize(initSettings);

  // Create Android channel
  await _flnp
      .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
      ?.createNotificationChannel(_highImportanceChannel);

  // iOS foreground presentation for FCM banners while app is open
  await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(
    alert: true,
    badge: true,
    sound: true,
  );

  // Show a local notification for foreground FCM messages (optional)
  FirebaseMessaging.onMessage.listen((RemoteMessage m) {
    final n = m.notification;
    if (n != null) {
      _flnp.show(
        n.hashCode,
        n.title,
        n.body,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'high_importance',
            'High Importance Notifications',
            channelDescription: 'Used for important notifications.',
            importance: Importance.high,
            priority: Priority.high,
          ),
          iOS: DarwinNotificationDetails(),
        ),
        payload: m.data.isEmpty ? null : m.data.toString(),
      );
    }
  });
}

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Status bar style
  SystemChrome.setSystemUIOverlayStyle(
    const SystemUiOverlayStyle(
      statusBarColor: AppTheme.primaryRed,
      statusBarIconBrightness: Brightness.light,
    ),
  );

  // 1) Initialize Firebase BEFORE any Firebase API is called
  await Firebase.initializeApp(
    options: fo.DefaultFirebaseOptions.currentPlatform,
  );

  // 2) Register the background message handler
  FirebaseMessaging.onBackgroundMessage(firebaseMessagingBackgroundHandler);

  // 3) (Optional) Initialize local notifications & foreground presentation
  await _initLocalNotifications();

  // ‚ùå Remove postFrame subscribe from here; you already gate + subscribe in SplashScreen
  // If you *must* subscribe here instead, do it AFTER init:
  // await FirebaseMessaging.instance.subscribeToTopic('topic');

  runApp(const AmbalpadyApp());
}

class AmbalpadyApp extends StatelessWidget {
  const AmbalpadyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Ambalpady App',
      debugShowCheckedModeBanner: false,
      theme: AppTheme.lightTheme,
      darkTheme: AppTheme.darkTheme,
      themeMode: ThemeMode.system,
      supportedLocales: const [Locale('en')],
      localizationsDelegates: const [
        AppLocalizations.delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      localeResolutionCallback: (locale, supportedLocales) {
        for (final s in supportedLocales) {
          if (s.languageCode == locale?.languageCode) return s;
        }
        return supportedLocales.first;
      },
      home: const SplashScreen(),
    );
  }
}
